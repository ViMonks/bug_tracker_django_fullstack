[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "sites", "model": "site"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "account", "model": "emailaddress"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "account", "model": "emailconfirmation"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "socialaccount", "model": "socialaccount"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "socialaccount", "model": "socialapp"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "socialaccount", "model": "socialtoken"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "users", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "guardian", "model": "groupobjectpermission"}}, {"model": "contenttypes.contenttype", "pk": 14, "fields": {"app_label": "guardian", "model": "userobjectpermission"}}, {"model": "contenttypes.contenttype", "pk": 15, "fields": {"app_label": "tracker", "model": "comment"}}, {"model": "contenttypes.contenttype", "pk": 16, "fields": {"app_label": "tracker", "model": "project"}}, {"model": "contenttypes.contenttype", "pk": 17, "fields": {"app_label": "tracker", "model": "team"}}, {"model": "contenttypes.contenttype", "pk": 18, "fields": {"app_label": "tracker", "model": "ticket"}}, {"model": "sessions.session", "pk": "2gmj050zfg4tu6f619b25aoizhl1k9sc", "fields": {"session_data": "OGJlYzBmMzkyM2E0MmNhMmI0ZDU3NjhiZTY2ZWUxOTJmYjAzMTM0ZTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4OWFiNTQxZjI5M2JiODI2NmE0NzI3YWI3ZDc4MzI5YTZmODMwM2ZkIiwiX3Nlc3Npb25fZXhwaXJ5IjoxMjA5NjAwfQ==", "expire_date": "2020-08-11T18:43:18.006Z"}}, {"model": "sessions.session", "pk": "k6kx9bo9u4es7bf1sikbia4l271qpjmg", "fields": {"session_data": "OGJlYzBmMzkyM2E0MmNhMmI0ZDU3NjhiZTY2ZWUxOTJmYjAzMTM0ZTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiI4OWFiNTQxZjI5M2JiODI2NmE0NzI3YWI3ZDc4MzI5YTZmODMwM2ZkIiwiX3Nlc3Npb25fZXhwaXJ5IjoxMjA5NjAwfQ==", "expire_date": "2020-08-11T20:00:06.731Z"}}, {"model": "sessions.session", "pk": "xhry2gc1mvqqmx6tgt2bq4q1xf0pzs3d", "fields": {"session_data": "NzYwNmQ1MDkxMDYyNmU2ZDE5OGNmYmM5OTkwMmMwZjI3MDU4ZjNkOTp7Il9zZXNzaW9uX2V4cGlyeSI6MTIwOTYwMCwiX2F1dGhfdXNlcl9pZCI6IjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaGFzaCI6Ijg5YWI1NDFmMjkzYmI4MjY2YTQ3MjdhYjdkNzgzMjlhNmY4MzAzZmQifQ==", "expire_date": "2020-08-11T18:35:41.631Z"}}, {"model": "sites.site", "pk": 1, "fields": {"domain": "monksbugtracker.com", "name": "Bug Tracker v2"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add permission", "content_type": 1, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change permission", "content_type": 1, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete permission", "content_type": 1, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can view permission", "content_type": 1, "codename": "view_permission"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can add group", "content_type": 2, "codename": "add_group"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can change group", "content_type": 2, "codename": "change_group"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can delete group", "content_type": 2, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can view group", "content_type": 2, "codename": "view_group"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can add content type", "content_type": 3, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can change content type", "content_type": 3, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can delete content type", "content_type": 3, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can view content type", "content_type": 3, "codename": "view_contenttype"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add session", "content_type": 4, "codename": "add_session"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change session", "content_type": 4, "codename": "change_session"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete session", "content_type": 4, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can view session", "content_type": 4, "codename": "view_session"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can add site", "content_type": 5, "codename": "add_site"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can change site", "content_type": 5, "codename": "change_site"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can delete site", "content_type": 5, "codename": "delete_site"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can view site", "content_type": 5, "codename": "view_site"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can add log entry", "content_type": 6, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can change log entry", "content_type": 6, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can delete log entry", "content_type": 6, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can view log entry", "content_type": 6, "codename": "view_logentry"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add email address", "content_type": 7, "codename": "add_emailaddress"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change email address", "content_type": 7, "codename": "change_emailaddress"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete email address", "content_type": 7, "codename": "delete_emailaddress"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can view email address", "content_type": 7, "codename": "view_emailaddress"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can add email confirmation", "content_type": 8, "codename": "add_emailconfirmation"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can change email confirmation", "content_type": 8, "codename": "change_emailconfirmation"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can delete email confirmation", "content_type": 8, "codename": "delete_emailconfirmation"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can view email confirmation", "content_type": 8, "codename": "view_emailconfirmation"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can add social account", "content_type": 9, "codename": "add_socialaccount"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can change social account", "content_type": 9, "codename": "change_socialaccount"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can delete social account", "content_type": 9, "codename": "delete_socialaccount"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can view social account", "content_type": 9, "codename": "view_socialaccount"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add social application", "content_type": 10, "codename": "add_socialapp"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change social application", "content_type": 10, "codename": "change_socialapp"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete social application", "content_type": 10, "codename": "delete_socialapp"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can view social application", "content_type": 10, "codename": "view_socialapp"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can add social application token", "content_type": 11, "codename": "add_socialtoken"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can change social application token", "content_type": 11, "codename": "change_socialtoken"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can delete social application token", "content_type": 11, "codename": "delete_socialtoken"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can view social application token", "content_type": 11, "codename": "view_socialtoken"}}, {"model": "auth.permission", "pk": 45, "fields": {"name": "Can add user", "content_type": 12, "codename": "add_user"}}, {"model": "auth.permission", "pk": 46, "fields": {"name": "Can change user", "content_type": 12, "codename": "change_user"}}, {"model": "auth.permission", "pk": 47, "fields": {"name": "Can delete user", "content_type": 12, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 48, "fields": {"name": "Can view user", "content_type": 12, "codename": "view_user"}}, {"model": "auth.permission", "pk": 49, "fields": {"name": "Can add group object permission", "content_type": 13, "codename": "add_groupobjectpermission"}}, {"model": "auth.permission", "pk": 50, "fields": {"name": "Can change group object permission", "content_type": 13, "codename": "change_groupobjectpermission"}}, {"model": "auth.permission", "pk": 51, "fields": {"name": "Can delete group object permission", "content_type": 13, "codename": "delete_groupobjectpermission"}}, {"model": "auth.permission", "pk": 52, "fields": {"name": "Can view group object permission", "content_type": 13, "codename": "view_groupobjectpermission"}}, {"model": "auth.permission", "pk": 53, "fields": {"name": "Can add user object permission", "content_type": 14, "codename": "add_userobjectpermission"}}, {"model": "auth.permission", "pk": 54, "fields": {"name": "Can change user object permission", "content_type": 14, "codename": "change_userobjectpermission"}}, {"model": "auth.permission", "pk": 55, "fields": {"name": "Can delete user object permission", "content_type": 14, "codename": "delete_userobjectpermission"}}, {"model": "auth.permission", "pk": 56, "fields": {"name": "Can view user object permission", "content_type": 14, "codename": "view_userobjectpermission"}}, {"model": "auth.permission", "pk": 57, "fields": {"name": "Can add comment", "content_type": 15, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 58, "fields": {"name": "Can change comment", "content_type": 15, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 59, "fields": {"name": "Can delete comment", "content_type": 15, "codename": "delete_comment"}}, {"model": "auth.permission", "pk": 60, "fields": {"name": "Can view comment", "content_type": 15, "codename": "view_comment"}}, {"model": "auth.permission", "pk": 61, "fields": {"name": "Can add project", "content_type": 16, "codename": "add_project"}}, {"model": "auth.permission", "pk": 62, "fields": {"name": "Can change project", "content_type": 16, "codename": "change_project"}}, {"model": "auth.permission", "pk": 63, "fields": {"name": "Can delete project", "content_type": 16, "codename": "delete_project"}}, {"model": "auth.permission", "pk": 64, "fields": {"name": "Can view project", "content_type": 16, "codename": "view_project"}}, {"model": "auth.permission", "pk": 65, "fields": {"name": "Can add team", "content_type": 17, "codename": "add_team"}}, {"model": "auth.permission", "pk": 66, "fields": {"name": "Can change team", "content_type": 17, "codename": "change_team"}}, {"model": "auth.permission", "pk": 67, "fields": {"name": "Can delete team", "content_type": 17, "codename": "delete_team"}}, {"model": "auth.permission", "pk": 68, "fields": {"name": "Can view team", "content_type": 17, "codename": "view_team"}}, {"model": "auth.permission", "pk": 69, "fields": {"name": "Can add ticket", "content_type": 18, "codename": "add_ticket"}}, {"model": "auth.permission", "pk": 70, "fields": {"name": "Can change ticket", "content_type": 18, "codename": "change_ticket"}}, {"model": "auth.permission", "pk": 71, "fields": {"name": "Can delete ticket", "content_type": 18, "codename": "delete_ticket"}}, {"model": "auth.permission", "pk": 72, "fields": {"name": "Can view ticket", "content_type": 18, "codename": "view_ticket"}}, {"model": "users.user", "pk": 1, "fields": {"password": "argon2$argon2i$v=19$m=512,t=2,p=2$NWxWYnVnSmxwOFpL$jy/IubtZOtObiWrgCQGvug", "last_login": "2020-07-28T20:00:06.697Z", "is_superuser": true, "username": "thurmanj", "first_name": "", "last_name": "", "email": "thurman.justin@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2020-07-28T18:34:30.191Z", "name": "JustinADMIN", "groups": [], "user_permissions": []}}, {"model": "users.user", "pk": 2, "fields": {"password": "argon2$argon2i$v=19$m=512,t=2,p=2$ODA3cDA5blJScWNl$cYL5rziNWI9pR/lrB3Isrw", "last_login": null, "is_superuser": false, "username": "developer", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-07-28T18:43:49Z", "name": "First Developer", "groups": [], "user_permissions": []}}, {"model": "users.user", "pk": 3, "fields": {"password": "argon2$argon2i$v=19$m=512,t=2,p=2$TXN3VktLZVphMGNE$MGZR6n8dlldO6W4L3HjErg", "last_login": null, "is_superuser": false, "username": "manager", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-07-28T18:43:56Z", "name": "First Manager", "groups": [], "user_permissions": []}}, {"model": "users.user", "pk": 4, "fields": {"password": "!TAwfrZa6l7r7njx4DWrRd2u0aN5C9O0veRfimgAd", "last_login": null, "is_superuser": false, "username": "AnonymousUser", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-07-28T19:09:43.248Z", "name": "", "groups": [], "user_permissions": []}}, {"model": "tracker.team", "pk": 1, "fields": {"title": "MonksSoloDev", "description": "My solo dev team, primarily for building this site.", "owner": 1, "members": [1]}}, {"model": "tracker.project", "pk": 3, "fields": {"title": "Added from admin", "description": "Project added from admin", "created_on": "2020-07-28T19:26:40.680Z", "manager": 1, "is_archived": true, "team": 1, "developers": [1]}}, {"model": "tracker.project", "pk": 5, "fields": {"title": "Creating new project in v2", "description": "Created this project in v2, from the site\r\n\r\n# Let's test markdown while we're here\r\n```python\r\ndef test(input):\r\n\tpass\r\n```", "created_on": "2020-07-28T19:38:05.938Z", "manager": 1, "is_archived": true, "team": 1, "developers": [1]}}, {"model": "tracker.project", "pk": 6, "fields": {"title": "Bug Tracker", "description": "This site, version 2.", "created_on": "2020-07-28T20:30:26.825Z", "manager": 1, "is_archived": false, "team": 1, "developers": [1]}}, {"model": "tracker.ticket", "pk": 1, "fields": {"user": 1, "title": "First ticket in v2", "description": "First ticket created in v2", "resolution": null, "project": 3, "priority": "medium", "status": "open", "created_on": "2020-07-28T19:28:12.549Z", "last_updated_on": "2020-07-28T19:28:33.216Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 2, "fields": {"user": 1, "title": "New ticket", "description": "", "resolution": "I closed it.", "project": 5, "priority": "low", "status": "closed", "created_on": "2020-07-28T19:40:47.032Z", "last_updated_on": "2020-07-28T19:40:59.869Z", "team": 1, "developer": []}}, {"model": "tracker.ticket", "pk": 3, "fields": {"user": 1, "title": "Fix sorting for status/priority columns", "description": "Current status column sorts alphabetically. Want it to sort based on actual priority.", "resolution": "This page had the answer: https://stackoverflow.com/questions/48186782/combining-django-f-value-and-a-dict-to-annotate-a-queryset", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:31:31.396Z", "last_updated_on": "2020-07-28T20:31:47.476Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 4, "fields": {"user": 1, "title": "add codeblock input widget", "description": "I'd like to be able to add codeblocks as either comments or uploads or part of ticket description -- something like that. Something that lets users suggest code and let other users see it. Maybe even the option for syntax highlighting and selecting what language.", "resolution": "https://docs.djangoproject.com/en/3.0/topics/class-based-views/generic-display/#dynamic-filtering\r\n\r\n```python\r\ndef test():\r\n\tpass\r\n```\r\n\r\nUsed simplemde (simple markdown editor) as a javascript-based editor for the forms. Used python-markdown for the codeblock rendering.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:32:48.296Z", "last_updated_on": "2020-07-28T20:34:16.392Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 5, "fields": {"user": 1, "title": "Ticket closing button", "description": "Add a button to ticket details page to close a ticket. Require confirmation popup.", "resolution": "Two main pieces: I updated views.py to include a TicketDetailsResolution view. This is a form view that updates the ticket resolution and the ticket status.\r\n\r\nI also had to update the SuperTicketDetails view to differentiate between two different POST requests. This required updating the HTML form with names for the submit buttons. Then, in SuperTicketDetails, I look for those names in request.POST and serve up the corresponding form view.\r\n\r\nAlso created a new form for ticket updating which only has the resolution field. This is the form that gets served up in the TicketDetailsResolution view.\r\n\r\nFinally, the core HTML: added a bootstrap modal that contains the form.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:34:47.229Z", "last_updated_on": "2020-07-28T20:34:54.979Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 6, "fields": {"user": 1, "title": "Add field to tickets to describe how it was resolved", "description": "Need to see if adding a field to a model causes problems. Should be able to fill out this field in the closing ticket popup dialog.", "resolution": "Added a resolution field to the model and a markdown editor for the update ticket page. Resolution is also displayed on the ticket details page if the resolution exists.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:35:23.731Z", "last_updated_on": "2020-07-28T20:35:34.329Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 7, "fields": {"user": 1, "title": "Remove spellchecker highlighting from SMDE", "description": "", "resolution": "added `spellChecker: false;` to the SimpleMDE instantiation.", "project": 6, "priority": "low", "status": "closed", "created_on": "2020-07-28T20:36:02.920Z", "last_updated_on": "2020-07-28T20:36:26.897Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 8, "fields": {"user": 1, "title": "Archiving projects", "description": "Need to be able to archive projects, like closing tickets.", "resolution": "Added ArchiveProject view, did it the Django way, from the docs. Might still need some cleanup though.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:37:05.598Z", "last_updated_on": "2020-07-28T20:37:12.069Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 9, "fields": {"user": 1, "title": "Reopen tickets", "description": "Need to be able to reopen tickets.", "resolution": "Created a new view: TicketReopen, which is a form view with a form_valid and form_invalid methods that both change ticket status and save. Feels kind of clunky, but it works. Not sure if it's best practices.\r\n\r\nI don't really know how to handle empty forms, or make database changes without sending a form. Need to ask Craig.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:37:34.996Z", "last_updated_on": "2020-07-28T20:37:41.037Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 10, "fields": {"user": 1, "title": "Change TicketReopen view to be like ArchiveProject view", "description": "The way I'm currently doing it is all messed up. Fix, please.", "resolution": "removed FormView subclassing, just subclassed View instead, handled the logic in the post() method, bypassed form_valid() and form_invalid() entirely.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:37:59.900Z", "last_updated_on": "2020-07-28T20:38:06.657Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 11, "fields": {"user": 1, "title": "Change ticket resolution form to be like ArchiveProject form", "description": "This one will be much trickier. But I think I can use the generic Form view to bypass form_valid and form_invalid, which I believe is where the problem is. Will have to change the HTML from a bootstrap_form injection into a generic textarea input widget. Then we can just grab the text with request.method.GET.get('name') or whatever.", "resolution": "Didn't do anything like the description. The problem was in the relevant Form class. I had set the resolution model attribute to blank=True, but I didn't set the field in the Form class to required=False, so even though the attribute wasn't required by the model, it was required by the form, hence the form was coming back invalid when it was left blank. Fixing that solved the issue, and I was able to remove all the overwrites of the form_invalid() method.", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:38:40.723Z", "last_updated_on": "2020-07-28T20:38:46.552Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 12, "fields": {"user": 1, "title": "Remove spellchecker from all SMDE", "description": "", "resolution": "Pretty sure I got them all. If any are missing, just need to add `{spellChecker: false,}` to the function call to `SimpleMDE()`.", "project": 6, "priority": "low", "status": "closed", "created_on": "2020-07-28T20:39:00.699Z", "last_updated_on": "2020-07-28T20:39:21.855Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 13, "fields": {"user": 1, "title": "Assign developers to projects", "description": "I'd like for managers to be able to view all the tickets assigned to each developer on their projects, so that they can see everyone's workload. Dynamic queryset filtering seems like the best method. See https://docs.djangoproject.com/en/3.0/topics/class-based-views/generic-display/#dynamic-filtering\r\n\r\nUpdate: changing the scope of this a little bit. I want developers to be assigned to projects and then only able to view the projects to which they are assigned and the tickets associated with those projects.", "resolution": "Did a sweeping revision of how permissions work. Created two permission mixins called `ViewProjectMixin` and `ViewTicketMixin`. They both check the project (or, for the ticket mixin, the project to which the ticket is assigned) and see if the user is either the project's manager or in the list of assigned developers. If not, permission denied. All project and ticket views now have this mixin incorporated.\r\n\r\nAlso added a staff only mixin to project creation.\r\n\r\nThe only edge case so far is for ticket submission. Since tickets don't have related projects until they're created, I needed a way to prevent users from submitting tickets to projects they aren't assigned to. So I modified the get() method on the CreateTicket view. It now grabs the pk from the URL kwargs and gets the project associated with that pk. It then checks if the user is either the manager of that project, one of the project's developers, or staff. If not, raise PermissionDenied. Then I removed the project selection from the creation form and had the project assigned during form validation using the same logic (getting the project based on the URL kwarg).", "project": 6, "priority": "medium", "status": "closed", "created_on": "2020-07-28T20:39:51.592Z", "last_updated_on": "2020-07-28T20:41:03.429Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 14, "fields": {"user": 1, "title": "Allow blank description", "description": "", "resolution": "`blank=True, null=True` in the description field in the model.", "project": 6, "priority": "low", "status": "closed", "created_on": "2020-07-28T20:41:28.008Z", "last_updated_on": "2020-07-28T20:41:45.452Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 15, "fields": {"user": 1, "title": "Make pagination buttons smaller", "description": "", "resolution": "I wrapped the `{% render_table table %}` call in a `<div class=\"pagination-sm\"></div>`. I have no idea if that's best practices or will cause problems later. But it worked.\r\n\r\nComments pagination buttons are done differently, did it earlier.", "project": 6, "priority": "low", "status": "closed", "created_on": "2020-07-28T20:42:07.301Z", "last_updated_on": "2020-07-28T20:42:40.246Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 16, "fields": {"user": 1, "title": "Project filtering no longer works", "description": "", "resolution": "I had overwritten `get_table_data()` in my view for projects in order to filter by archived status and to annotate the data with an `open_tickets` attribute. But that's really the work of a queryset, so I moved the logic there.", "project": 6, "priority": "low", "status": "closed", "created_on": "2020-07-28T20:42:59.713Z", "last_updated_on": "2020-07-28T20:43:23.702Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 17, "fields": {"user": 1, "title": "\"All Tickets\" view should filter based on assigned projects", "description": "Instead of showing all tickets, the \"all tickets\" page should filter based on what projects the user is assigned to, either as manager or developer.\r\n\r\nStaff can, of course, still see all tickets.", "resolution": "Tickets and projects now both filter based on the user accessing them thanks to custom querysets created for both projects and tickets. These querysets filter based on the user's status, but in essence, all they do is filter objects based on whether the user is assigned to the corresponding project. Like so:\r\n\r\n```python\r\nclass ProjectQueryset(models.QuerySet):\r\n    def filter_for_user(self, user):\r\n        if user.is_staff:\r\n            return Project.objects.all()\r\n        elif user.profile.is_manager:\r\n            return Project.objects.filter(manager=user)\r\n        elif user.profile.is_developer:\r\n            return Project.objects.filter(developers=user)\r\n        return Project.objects.none()\r\n\r\nclass TicketQueryset(models.QuerySet):\r\n    def filter_for_user(self, user):\r\n        if user.is_staff:\r\n            return Ticket.objects.all()\r\n        elif user.profile.is_manager:\r\n            return Ticket.objects.filter(project__manager=user)\r\n        elif user.profile.is_developer:\r\n            return Ticket.objects.filter(project__developers=user)\r\n        return Project.objects.none()\r\n```\r\nThen I just use this custom `for_user` queryset anytime I call the relevant models in a view.", "project": 6, "priority": "high", "status": "closed", "created_on": "2020-07-28T20:44:07.978Z", "last_updated_on": "2020-07-28T20:44:58.475Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 18, "fields": {"user": 1, "title": "Resolution field in update ticket form needs to be markdown editor", "description": "", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:45:29.813Z", "last_updated_on": "2020-07-28T20:45:29.813Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 19, "fields": {"user": 1, "title": "Uploading files to tickets", "description": "Users need to be able to upload files to tickets and view/download files already uploaded.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:46:02.529Z", "last_updated_on": "2020-07-28T20:46:02.529Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 20, "fields": {"user": 1, "title": "Demo users", "description": "Users should be able to login with a demo version of each user: admin, developer, manager, submitter, and view site functionality without changing the main database.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:46:17.848Z", "last_updated_on": "2020-07-28T20:46:17.848Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 21, "fields": {"user": 1, "title": "Role assignment", "description": "Staff should be able to assign user roles. But need to see if this should be done through Django Admin or a separate page.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:46:37.336Z", "last_updated_on": "2020-07-28T20:46:37.336Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 22, "fields": {"user": 1, "title": "Ticket dashboard", "description": "Dashboard displaying high-level overview of tickets. Pie charts with ticket status, tickets by project for managers, that sort of thing.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:46:52.958Z", "last_updated_on": "2020-07-28T20:46:52.958Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 23, "fields": {"user": 1, "title": "Aesthetics", "description": "", "resolution": null, "project": 6, "priority": "low", "status": "open", "created_on": "2020-07-28T20:47:04.153Z", "last_updated_on": "2020-07-28T20:47:04.153Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 24, "fields": {"user": 1, "title": "Enabling Teams", "description": "Need some way to let users create teams if I want to deploy this so anyone can use it. Invitations to teams needed as well.\r\n\r\nA good method of implementation might be a default queryset filtering. The following code from Craig:\r\n\r\n```python\r\nclass TicketQuerySet(QuerySet):\r\n  def for_user(user):\r\n    return self.filter(team=user.team).filter(active=True).filter(more_filters=maybe)\r\n\r\nclass Ticket(models.Model):\r\n  ...\r\n  objects = Manager.from_queryset(TicketQuerySet)()\r\n```\r\n\"Then all over my app, whenever I'm loading a model with user sensitive information or permissions, I always call `WhateverModel.objects.for_user(request.user)` and trust that my `for_user()` function does everything necessary\"", "resolution": null, "project": 6, "priority": "high", "status": "open", "created_on": "2020-07-28T20:47:48.466Z", "last_updated_on": "2020-07-28T20:48:02.776Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 25, "fields": {"user": 1, "title": "All devs view for managers", "description": "Need a view of all developers available to managers. Should show their assigned, non-closed tickets and their assigned projects.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:48:25.022Z", "last_updated_on": "2020-07-28T20:48:25.022Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 26, "fields": {"user": 1, "title": "Should tickets only have open or closed status?", "description": "Not sure the assigned and in progress values for status help much. Especially since assigned is handled by seeing the developers actually assigned to a ticket.", "resolution": null, "project": 6, "priority": "urgent", "status": "open", "created_on": "2020-07-28T20:48:41.287Z", "last_updated_on": "2020-07-28T20:48:41.287Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 27, "fields": {"user": 1, "title": "Archived/unarchived projects count in the title doesn't update reliably", "description": "Not sure if this is also true for tickets. Will test later.", "resolution": null, "project": 6, "priority": "low", "status": "open", "created_on": "2020-07-28T20:48:57.162Z", "last_updated_on": "2020-07-28T20:48:57.162Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 28, "fields": {"user": 1, "title": "Add \"closed by\" feature to tickets - few options", "description": "Could add a \"closed by\" field and \"closed on\" which gets set when the ticket is closed. Could also just have a new comment get posted saying \"closed\" when a ticket is closed. Same for reopening.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:49:13.766Z", "last_updated_on": "2020-07-28T20:49:13.766Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 29, "fields": {"user": 1, "title": "Add Team Leader role", "description": "If I'm going to have users able to log into this, they can't all be admin, obviously. So I'll need to add a team leader role which lets people do some of the things that are currently restricted to admin. Right now, the main one is creating new projects. That needs to be something only a team leader can do. Though maybe multiple team leaders makes more sense.\r\n\r\nAlso, user management. Inviting users to a team. That part is going to be much harder than I thought.\r\n\r\nhttps://github.com/bee-keeper/django-invitations https://django-organizations.readthedocs.io/en/latest/getting_started.html\r\nhttps://simpleisbetterthancomplex.com/tutorial/2016/07/28/how-to-create-django-signals.html https://stackoverflow.com/questions/57207796/how-to-associate-invited-users-with-the-inviters-company-group https://stackoverflow.com/questions/61936580/modifying-the-django-invitations-package-to-allow-team-functionality\r\n\r\n# From Craig:\r\nI highly recommend delaying actual integration with an email provider Django has a concept of email_backends which provide pluggable email service And one of them is the console_backend that simply prints email contents to the stdout (aka, the terminal running manage.py runserver) And that's plenty good enough to start. You can copy the URLs from those printed emails and pretend you're the new user in an incognito window Once it's time to actually integrate with email, I'd probably go with Mailgun, but it's a medium-grade headache that you don't strictly need to move forward\r\n\r\nMy next recommendation there: encode everything in the URLs A common pattern might be to generate random UIDs for teams and include that in the invite link You can safely assume no one will guess a different team's UID, so it's a time when \"security by obscurity\" is actually acceptable So an invite email might contain a link to thewebsite.com/team-invites/abcd-efgh-1234-4567-restofuid And abcd-... was auto-generated for that team when it was inserted into the database Oh and also encode the user, obviously So it could be /team-invites/?team=&user= There are 1 trillion acceptable ways to do it, so don't feel trapped to go with that implementation", "resolution": null, "project": 6, "priority": "urgent", "status": "open", "created_on": "2020-07-28T20:50:08.423Z", "last_updated_on": "2020-07-28T20:50:08.423Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 30, "fields": {"user": 1, "title": "Consider which errors need 404 vs 403", "description": "Which errors need to be obfuscated vs. which can be exposed?", "resolution": null, "project": 6, "priority": "low", "status": "open", "created_on": "2020-07-28T20:50:24.816Z", "last_updated_on": "2020-07-28T20:50:24.816Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 31, "fields": {"user": 1, "title": "Rework landing page", "description": "Need to rework the landing page so that it handles user selecting their team, as well as handle cases where the user first logs in and hasn't selected a team.", "resolution": null, "project": 6, "priority": "high", "status": "open", "created_on": "2020-07-28T20:50:37.196Z", "last_updated_on": "2020-07-28T20:50:37.196Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 32, "fields": {"user": 1, "title": "Default team for logging in", "description": "Either let users set a default team or somehow remember the last team they were viewing when they were last on the site.", "resolution": null, "project": 6, "priority": "high", "status": "open", "created_on": "2020-07-28T20:50:54.649Z", "last_updated_on": "2020-07-28T20:50:54.649Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 33, "fields": {"user": 1, "title": "Fix project creation/updating", "description": "Ticket creation/updating is fixed with the new system. Team is saved on ticket creation. Need to do the same for projects.", "resolution": null, "project": 6, "priority": "medium", "status": "open", "created_on": "2020-07-28T20:51:08.846Z", "last_updated_on": "2020-07-28T20:51:20.616Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 34, "fields": {"user": 1, "title": "Redo querysets and filtersets so they start at Team, not Project", "description": "", "resolution": null, "project": 6, "priority": "high", "status": "open", "created_on": "2020-07-28T20:51:41.742Z", "last_updated_on": "2020-07-28T20:51:41.742Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 35, "fields": {"user": 1, "title": "Managers and developers: tie to teams? Remove completely?", "description": "Could remove completely, so role assignment is more flexible. Or tie them to teams with a link table.", "resolution": null, "project": 6, "priority": "high", "status": "open", "created_on": "2020-07-28T20:51:59.319Z", "last_updated_on": "2020-07-28T20:51:59.319Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 36, "fields": {"user": 1, "title": "Remove django admin toolbar -- too slow", "description": "", "resolution": null, "project": 6, "priority": "urgent", "status": "open", "created_on": "2020-07-28T20:52:51.571Z", "last_updated_on": "2020-07-28T20:52:51.572Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 37, "fields": {"user": 1, "title": "Rework filter_for_user", "description": "Had to remove it in the rework, since users don't have profiles anymore. First must decide how I'm handling that, of course.", "resolution": null, "project": 6, "priority": "urgent", "status": "open", "created_on": "2020-07-28T21:36:43.345Z", "last_updated_on": "2020-07-28T21:36:43.345Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 38, "fields": {"user": 1, "title": "Refactor to fat models, thin views", "description": "", "resolution": null, "project": 6, "priority": "urgent", "status": "open", "created_on": "2020-07-28T21:37:25.543Z", "last_updated_on": "2020-07-28T21:37:25.543Z", "team": 1, "developer": [1]}}, {"model": "tracker.ticket", "pk": 39, "fields": {"user": 1, "title": "Figure out where my Postgresql database is and how to back it up", "description": "", "resolution": null, "project": 6, "priority": "urgent", "status": "open", "created_on": "2020-07-28T21:38:16.198Z", "last_updated_on": "2020-07-28T21:38:16.198Z", "team": 1, "developer": [1]}}, {"model": "tracker.comment", "pk": 2, "fields": {"user": 1, "created_on": "2020-07-28T19:28:33.193Z", "text": "Adding another comment.", "ticket": 1}}, {"model": "tracker.comment", "pk": 3, "fields": {"user": 1, "created_on": "2020-07-28T20:34:16.364Z", "text": "```python\r\ndef hey_listen():\r\n\tprint(\"Comments also have markdown!\")\r\n```", "ticket": 4}}, {"model": "tracker.comment", "pk": 4, "fields": {"user": 1, "created_on": "2020-07-28T20:40:17.372Z", "text": "This seems like a good jumping off point: [creating a manager with QuerySet methods](https://docs.djangoproject.com/en/3.0/topics/db/managers/#creating-a-manager-with-queryset-methods)", "ticket": 13}}, {"model": "tracker.comment", "pk": 5, "fields": {"user": 1, "created_on": "2020-07-28T20:40:38.073Z", "text": "This might be handy too: [FilteredRelation() objects](https://docs.djangoproject.com/en/3.0/ref/models/querysets/#filteredrelation-objects)", "ticket": 13}}, {"model": "tracker.comment", "pk": 6, "fields": {"user": 1, "created_on": "2020-07-28T20:47:59.013Z", "text": "See ticket about adding a team leader role. It will be necessary to implement this.", "ticket": 24}}, {"model": "tracker.comment", "pk": 7, "fields": {"user": 1, "created_on": "2020-07-28T20:48:02.750Z", "text": "Made some serious progress. Added teams, linked them to users, projects, and tickets. Added a filter_for_team() method to object querysets. Then reworked the URLs. That was the big part. Now all URLs pull from a default context supplied by a CommonContextMixin that grabs url kwargs. It's complicated. Still need to test that everything works, and then need to totally rework the homepage. But we're getting there.", "ticket": 24}}, {"model": "tracker.comment", "pk": 8, "fields": {"user": 1, "created_on": "2020-07-28T20:51:20.593Z", "text": "Pretty sure I did. Will check later.", "ticket": 33}}, {"model": "account.emailaddress", "pk": 1, "fields": {"user": 1, "email": "thurman.justin@gmail.com", "verified": true, "primary": true}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2020-07-28T18:43:49.445Z", "user": 1, "content_type": 12, "object_id": "2", "object_repr": "developer", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2020-07-28T18:43:56.935Z", "user": 1, "content_type": 12, "object_id": "3", "object_repr": "manager", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2020-07-28T18:44:12.277Z", "user": 1, "content_type": 12, "object_id": "3", "object_repr": "manager", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Name of User\"]}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2020-07-28T18:44:21.186Z", "user": 1, "content_type": 12, "object_id": "2", "object_repr": "developer", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Name of User\"]}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2020-07-28T19:22:28.275Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "MonksSoloDev", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2020-07-28T19:26:40.753Z", "user": 1, "content_type": 16, "object_id": "3", "object_repr": "Added from admin", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}]